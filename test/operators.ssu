// operators are presented in descending precedence.
//
// special
// system  interpreter system access
//
// left-to-right
// ()      function call
// []      access
//
// right-to-left
// -       unary minus
// !       logical NOT
//
// left-to-right
// =>      type cast
//
// left-to-right
// *       multiplication
// /       division
// %       modulo
//
// left-to-right
// +       addition
// -       subtraction
//
// left-to-right
// <       less
// <=      lequal
// >       greater
// >=      grequal
// ==      equal
// !=      nequal
//
// left-to-right
// &&      logical AND
//
// left-to-right
// ^^      logical XOR
//
// left-to-right
// ||      logical OR
//
// right-to-left
// ?:      tenary conditional
//
// right-to-left
// =       assign
// +=      add and assign
// -=      subtract and assign
// *=      multiply and assign
// /=      divide and assign
// %=      modulo and assign
